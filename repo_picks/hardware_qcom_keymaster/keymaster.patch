From 44fb76405e85d6a2961751bbda88482b0e3ef588 Mon Sep 17 00:00:00 2001
From: Chirayu Desai <chirayudesai1@gmail.com>
Date: Wed, 24 Aug 2016 19:23:38 +0530
Subject: [PATCH 01/10] Revert "msm8974: remove from top level makefile"

This reverts commit 583ecf5ed2a4be0d05229b8c6726680c3836be8b.

Change-Id: I1d74339e0f8242722682ded2ec7fc81a5a2d4341
---
 Android.mk | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Android.mk b/Android.mk
index 217c528..b656c7a 100644
--- a/Android.mk
+++ b/Android.mk
@@ -2,7 +2,7 @@
 ifneq ($(BOARD_IS_AUTOMOTIVE),true)
 LOCAL_PATH := $(call my-dir)
 
-ifneq ($(filter msm8960 msm8084,$(TARGET_BOARD_PLATFORM)),)
+ifneq ($(filter msm8960 msm8974 msm8084,$(TARGET_BOARD_PLATFORM)),)
 
 keymaster-def := -fvisibility=hidden -Wall
 ifeq ($(TARGET_BOARD_PLATFORM),msm8084)
-- 
2.19.1


From 0df4e990d12034a475de36919696e45710e3a454 Mon Sep 17 00:00:00 2001
From: Chirayu Desai <chirayudesai1@gmail.com>
Date: Thu, 25 Aug 2016 20:45:19 +0530
Subject: [PATCH 02/10] Revert "Remove legacy keymaster support for msm8226"

This reverts commit 888834f9aba0609222c6e6bbd86bd6625af28746.

Change-Id: I2a6cceb2adb7c217976f6c31bb0943dc5d064ae8
---
 Android.mk | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Android.mk b/Android.mk
index b656c7a..d2439a0 100644
--- a/Android.mk
+++ b/Android.mk
@@ -2,7 +2,7 @@
 ifneq ($(BOARD_IS_AUTOMOTIVE),true)
 LOCAL_PATH := $(call my-dir)
 
-ifneq ($(filter msm8960 msm8974 msm8084,$(TARGET_BOARD_PLATFORM)),)
+ifneq ($(filter msm8960 msm8974 msm8226 msm8084,$(TARGET_BOARD_PLATFORM)),)
 
 keymaster-def := -fvisibility=hidden -Wall
 ifeq ($(TARGET_BOARD_PLATFORM),msm8084)
-- 
2.19.1


From 83cab7c15927ddfde8f5e9ca0705a299bd79f064 Mon Sep 17 00:00:00 2001
From: Jyoti Wadhwani <jyotiw@codeaurora.org>
Date: Fri, 17 Oct 2014 11:57:10 -0700
Subject: [PATCH 03/10] Keymaster: Support for 64bit userspace and 32bit TZ

HW keymaster is not supported for 64bit userspace. This patch
updates variable types to support the architecture.
It also makes change in Android.mk file to support all qcom
platforms.

Change-Id: I25633d707b425388bcc116196c0e0022c5c4f9a5

keymaster: Fix build for devices that don't define BOARD_USES_QCOM_HARDWARE

Change-Id: Ia80c28920ac8d8fd0ce3ac703977dc8a5a0651ce

keymaster: Allow 8952 to build

Change-Id: I9c2d5a0e4fc584f7909e0733827d5499191d82a3

keymaster: add msm8909 into support list

Issue-Id: FEIJ-8

Change-Id: I1252ec5f1171ca94635e6f58d835a588948be771
---
 Android.mk         |  4 ++--
 keymaster_qcom.cpp | 27 +++++++++++++++++----------
 keymaster_qcom.h   | 14 +++++++-------
 3 files changed, 26 insertions(+), 19 deletions(-)

diff --git a/Android.mk b/Android.mk
index d2439a0..a078c8c 100644
--- a/Android.mk
+++ b/Android.mk
@@ -2,7 +2,7 @@
 ifneq ($(BOARD_IS_AUTOMOTIVE),true)
 LOCAL_PATH := $(call my-dir)
 
-ifneq ($(filter msm8960 msm8974 msm8226 msm8084,$(TARGET_BOARD_PLATFORM)),)
+ifneq ($(filter msm8960 msm8226 msm8974 msm8610 msm8084 apq8084 msm8909 msm8916 msm8952 msm8992 msm8994,$(TARGET_BOARD_PLATFORM)),)
 
 keymaster-def := -fvisibility=hidden -Wall
 ifeq ($(TARGET_BOARD_PLATFORM),msm8084)
@@ -13,7 +13,7 @@ include $(CLEAR_VARS)
 
 LOCAL_MODULE := keystore.$(TARGET_BOARD_PLATFORM)
 
-LOCAL_MODULE_PATH := $(TARGET_OUT_SHARED_LIBRARIES)/hw
+LOCAL_MODULE_RELATIVE_PATH := hw
 
 LOCAL_SRC_FILES := keymaster_qcom.cpp
 
diff --git a/keymaster_qcom.cpp b/keymaster_qcom.cpp
index e779cbc..4219317 100644
--- a/keymaster_qcom.cpp
+++ b/keymaster_qcom.cpp
@@ -51,6 +51,9 @@
 //#define LOG_NDEBUG 0
 
 #define LOG_TAG "QCOMKeyMaster"
+#define UNUSED(x) (void)(x)
+#define KM_SB_LENGTH (4096 * 2)
+
 #include <cutils/log.h>
 struct qcom_km_ion_info_t {
     int32_t ion_fd;
@@ -63,8 +66,8 @@ struct qcom_km_ion_info_t {
 struct qcom_keymaster_handle {
     struct QSEECom_handle *qseecom;
     void *libhandle;
-    int (*QSEECom_start_app)(struct QSEECom_handle ** handle, char* path,
-                          char* appname, uint32_t size);
+    int (*QSEECom_start_app)(struct QSEECom_handle ** handle, const char* path,
+                          const char* appname, uint32_t size);
     int (*QSEECom_shutdown_app)(struct QSEECom_handle **handle);
     int (*QSEECom_send_cmd)(struct QSEECom_handle* handle, void *cbuf,
                           uint32_t clen, void *rbuf, uint32_t rlen);
@@ -105,6 +108,7 @@ static int qcom_km_get_keypair_public(const keymaster0_device_t* dev,
 
     struct qcom_km_key_blob * keyblob_ptr = (struct qcom_km_key_blob *)keyBlob;
 
+    UNUSED(dev);
     if (x509_data == NULL || x509_data_length == NULL) {
         ALOGE("Output public key buffer == NULL");
         return -1;
@@ -236,7 +240,7 @@ static int32_t qcom_km_ION_memalloc(struct qcom_km_ion_info_t *handle,
        goto alloc_fail;
     }
 
-    if (ion_alloc_data.handle != NULL) {
+    if (ion_alloc_data.handle) {
        ifd_data.handle = ion_alloc_data.handle;
     } else {
        ret = -1;
@@ -403,7 +407,7 @@ static int qcom_km_import_keypair(const keymaster0_device_t* dev,
     int ret = 0;
 
     ihandle.ion_fd = 0;
-    ihandle.ion_alloc_handle.handle = NULL;
+    ihandle.ion_alloc_handle.handle = 0;
     if (qcom_km_ION_memalloc(&ihandle, QSEECOM_ALIGN(key_length)) < 0) {
         ALOGE("ION allocation  failed");
         return -1;
@@ -425,7 +429,7 @@ static int qcom_km_import_keypair(const keymaster0_device_t* dev,
     resp = (keymaster_import_keypair_resp_t *)(handle->ion_sbuffer +
                                         QSEECOM_ALIGN(sizeof(keymaster_import_keypair_cmd_t)));
     send_cmd->cmd_id = KEYMASTER_IMPORT_KEYPAIR;
-    send_cmd->pkcs8_key = (uint32_t)ihandle.ion_sbuffer;
+    send_cmd->pkcs8_key = (uint32_t)(uintptr_t)ihandle.ion_sbuffer;
 
     memcpy((unsigned char *)ihandle.ion_sbuffer, key, key_length);
 
@@ -506,7 +510,7 @@ static int qcom_km_sign_data(const keymaster0_device_t* dev,
 
     handle = (struct QSEECom_handle *)(km_handle->qseecom);
     ihandle.ion_fd = 0;
-    ihandle.ion_alloc_handle.handle = NULL;
+    ihandle.ion_alloc_handle.handle = 0;
     if (qcom_km_ION_memalloc(&ihandle, dataLength) < 0) {
         ALOGE("ION allocation  failed");
         return -1;
@@ -527,7 +531,7 @@ static int qcom_km_sign_data(const keymaster0_device_t* dev,
     memcpy((unsigned char *)(&send_cmd->key_blob), keyBlob, keyBlobLength);
     memcpy((unsigned char *)ihandle.ion_sbuffer, data, dataLength);
 
-    send_cmd->data = (uint32_t)ihandle.ion_sbuffer;
+    send_cmd->data = (uint32_t)(uintptr_t)ihandle.ion_sbuffer;
     send_cmd->dlen = dataLength;
     resp->sig_len = KM_KEY_SIZE_MAX;
     resp->status = KEYMASTER_FAILURE;
@@ -606,7 +610,7 @@ static int qcom_km_verify_data(const keymaster0_device_t* dev,
 
     handle = (struct QSEECom_handle *)(km_handle->qseecom);
     ihandle.ion_fd = 0;
-    ihandle.ion_alloc_handle.handle = NULL;
+    ihandle.ion_alloc_handle.handle = 0;
     if (qcom_km_ION_memalloc(&ihandle, signedDataLength + signatureLength) <0) {
         ALOGE("ION allocation  failed");
         return -1;
@@ -626,7 +630,7 @@ static int qcom_km_verify_data(const keymaster0_device_t* dev,
     send_cmd->sign_param.padding_type = sign_params->padding_type;
     memcpy((unsigned char *)(&send_cmd->key_blob), keyBlob, keyBlobLength);
 
-    send_cmd->signed_data = (uint32_t)ihandle.ion_sbuffer;
+    send_cmd->signed_data = (uint32_t)(uintptr_t)ihandle.ion_sbuffer;
     send_cmd->signed_dlen = signedDataLength;
     memcpy((unsigned char *)ihandle.ion_sbuffer, signedData, signedDataLength);
 
@@ -757,7 +761,10 @@ static int qcom_km_open(const hw_module_t* module, const char* name,
     }
     dev->context = (void *)km_handle;
     ret = (*km_handle->QSEECom_start_app)((struct QSEECom_handle **)&km_handle->qseecom,
-                         "/vendor/firmware/keymaster", "keymaster", 4096*2);
+                        "/vendor/firmware/keymaster", "keymaster", KM_SB_LENGTH);
+    if(ret)
+        ret = (*km_handle->QSEECom_start_app)((struct QSEECom_handle **)&km_handle->qseecom,
+                        "/firmware/image", "keymaste", KM_SB_LENGTH);
     if (ret) {
         ALOGE("Loading keymaster app failed");
         free(km_handle);
diff --git a/keymaster_qcom.h b/keymaster_qcom.h
index ec481dd..c6dd4e5 100644
--- a/keymaster_qcom.h
+++ b/keymaster_qcom.h
@@ -105,7 +105,7 @@ typedef struct keymaster_gen_keypair_cmd keymaster_gen_keypair_cmd_t;
 struct keymaster_gen_keypair_resp {
       keymaster_cmd_t     cmd_id;
       qcom_km_key_blob_t  key_blob;
-      size_t              key_blob_len;
+      uint32_t            key_blob_len;
       int32_t             status;
 };
 typedef struct keymaster_gen_keypair_resp keymaster_gen_keypair_resp_t;
@@ -124,7 +124,7 @@ typedef struct keymaster_gen_keypair_resp keymaster_gen_keypair_resp_t;
 struct keymaster_import_keypair_cmd {
       keymaster_cmd_t cmd_id;
       uint32_t        pkcs8_key;
-      size_t          pkcs8_key_len;
+      uint32_t        pkcs8_key_len;
 };
 typedef struct keymaster_import_keypair_cmd keymaster_import_keypair_cmd_t;
 
@@ -140,7 +140,7 @@ typedef struct keymaster_import_keypair_cmd keymaster_import_keypair_cmd_t;
 struct keymaster_import_keypair_resp {
       keymaster_cmd_t     cmd_id;
       qcom_km_key_blob_t  key_blob;
-      size_t              key_blob_len;
+      uint32_t            key_blob_len;
       int32_t             status;
 };
 typedef struct keymaster_import_keypair_resp keymaster_import_keypair_resp_t;
@@ -161,7 +161,7 @@ struct keymaster_sign_data_cmd {
       keymaster_rsa_sign_params_t   sign_param;
       qcom_km_key_blob_t            key_blob;
       uint32_t                      data;
-      size_t                        dlen;
+      uint32_t                      dlen;
 };
 typedef struct keymaster_sign_data_cmd keymaster_sign_data_cmd_t;
 
@@ -176,7 +176,7 @@ typedef struct keymaster_sign_data_cmd keymaster_sign_data_cmd_t;
 struct keymaster_sign_data_resp {
       keymaster_cmd_t     cmd_id;
       uint8_t             signed_data[KM_KEY_SIZE_MAX];
-      size_t              sig_len;
+      uint32_t            sig_len;
       int32_t             status;
 };
 
@@ -200,9 +200,9 @@ struct keymaster_verify_data_cmd {
       keymaster_rsa_sign_params_t   sign_param;
       qcom_km_key_blob_t            key_blob;
       uint32_t                      signed_data;
-      size_t                        signed_dlen;
+      uint32_t                      signed_dlen;
       uint32_t                      signature;
-      size_t                        slen;
+      uint32_t                      slen;
 };
 typedef struct keymaster_verify_data_cmd keymaster_verify_data_cmd_t;
 /**
-- 
2.19.1


From 2df500425c80a002fa8ec5aa534593a20b9e0ef3 Mon Sep 17 00:00:00 2001
From: Ethan Chen <intervigil@gmail.com>
Date: Fri, 9 Jan 2015 11:54:48 -0800
Subject: [PATCH 04/10] keymaster: Set HEAP_MASK_COMPATIBILITY by platform for
 QCOM_HARDWARE

* Google kernels have a separate hack to handle this, only set by
  platform for QCOM_HARDWARE devices.

Change-Id: Iab91cee4922e1b3467691a04eb1c5061705fbab3
---
 Android.mk | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/Android.mk b/Android.mk
index a078c8c..39fe7da 100644
--- a/Android.mk
+++ b/Android.mk
@@ -5,9 +5,15 @@ LOCAL_PATH := $(call my-dir)
 ifneq ($(filter msm8960 msm8226 msm8974 msm8610 msm8084 apq8084 msm8909 msm8916 msm8952 msm8992 msm8994,$(TARGET_BOARD_PLATFORM)),)
 
 keymaster-def := -fvisibility=hidden -Wall
+ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
+ifneq ($(filter msm8960 msm8226 msm8974 msm8610 msm8084 apq8084,$(TARGET_BOARD_PLATFORM)),)
+keymaster-def += -D_ION_HEAP_MASK_COMPATIBILITY_WA
+endif
+else
 ifeq ($(TARGET_BOARD_PLATFORM),msm8084)
 keymaster-def += -D_ION_HEAP_MASK_COMPATIBILITY_WA
 endif
+endif
 
 include $(CLEAR_VARS)
 
-- 
2.19.1


From 054b1768c23148d855bf2abc9ab24bbf96d5079b Mon Sep 17 00:00:00 2001
From: Jyoti Wadhwani <jyotiw@codeaurora.org>
Date: Wed, 14 Jan 2015 15:59:33 -0800
Subject: [PATCH 05/10] Keymaster: Check if keymaster TZ app is loaded

qseecomd sets a property to indicate that it has successfully loaded
keymaster TZ app. This change checks waits until that property is set

Change-Id: I3533ba7489ab2d7d85473821557e4ddf0119cf6f
---
 Android.mk         |  3 ++-
 keymaster_qcom.cpp | 26 ++++++++++++++++++++++++++
 2 files changed, 28 insertions(+), 1 deletion(-)

diff --git a/Android.mk b/Android.mk
index 39fe7da..5035fab 100644
--- a/Android.mk
+++ b/Android.mk
@@ -32,7 +32,8 @@ LOCAL_SHARED_LIBRARIES := \
         libcrypto \
         liblog \
         libc \
-        libdl
+        libdl \
+        libcutils
 
 LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
 
diff --git a/keymaster_qcom.cpp b/keymaster_qcom.cpp
index 4219317..b18bb04 100644
--- a/keymaster_qcom.cpp
+++ b/keymaster_qcom.cpp
@@ -44,6 +44,8 @@
 #include <sys/stat.h>
 #include <dlfcn.h>
 
+#include <cutils/properties.h>
+
 #include "QSEEComAPI.h"
 #include "keymaster_qcom.h"
 
@@ -53,6 +55,8 @@
 #define LOG_TAG "QCOMKeyMaster"
 #define UNUSED(x) (void)(x)
 #define KM_SB_LENGTH (4096 * 2)
+#define MAX_PROPERTY_GET_ATTEMPTS 60
+#define PROPERTY_GET_SLEEP_INTERVAL 1
 
 #include <cutils/log.h>
 struct qcom_km_ion_info_t {
@@ -738,6 +742,8 @@ static int qcom_km_open(const hw_module_t* module, const char* name,
         hw_device_t** device)
 {
     int ret = 0;
+    unsigned int attempt_num = 0;
+    char property_val[PROPERTY_VALUE_MAX] = {0};
     qcom_keymaster_handle_t* km_handle;
     if (strcmp(name, KEYSTORE_KEYMASTER) != 0)
         return -EINVAL;
@@ -760,6 +766,26 @@ static int qcom_km_open(const hw_module_t* module, const char* name,
         return -ENOMEM;
     }
     dev->context = (void *)km_handle;
+    while (attempt_num < MAX_PROPERTY_GET_ATTEMPTS)
+    {
+        property_get("sys.keymaster.loaded", property_val, "");
+        if (strncmp(property_val, "true", sizeof(property_val)) == 0)
+        {
+            ALOGD("keymaster app is loaded");
+            break;
+        }
+        if (attempt_num == 0)
+            ALOGE("keymaster app is not loaded, attempt number %d", attempt_num);
+        attempt_num++;
+        sleep(PROPERTY_GET_SLEEP_INTERVAL);
+    }
+    if (attempt_num == MAX_PROPERTY_GET_ATTEMPTS)
+    {
+        ALOGE("Keymaster app not loaded: Max attempts reached");
+        free(km_handle);
+        return -1;
+    }
+    ALOGD("keymaster app got loaded at attempt number %d", attempt_num);
     ret = (*km_handle->QSEECom_start_app)((struct QSEECom_handle **)&km_handle->qseecom,
                         "/vendor/firmware/keymaster", "keymaster", KM_SB_LENGTH);
     if(ret)
-- 
2.19.1


From 65359e4488beb4d931f97cf6e120ddf33613b133 Mon Sep 17 00:00:00 2001
From: myfluxi <linflux@arcor.de>
Date: Wed, 4 Nov 2015 00:46:09 +0100
Subject: [PATCH 06/10] keymaster: Featureize support for waiting on QSEE to
 start

New devices need to wait for QSEE to load the Keymaster into TZ.
This is signalled by a property being set by qseecomd. Unfortunately
we don't have a good way to determine if this is the case for
a particular device, so make it opt-in.

Set TARGET_KEYMASTER_WAIT_FOR_QSEE=true for this behavior.

Change-Id: I99839b82fdd8ab6550a95e2676a5da03eccfe288
---
 Android.mk         | 3 +++
 keymaster_qcom.cpp | 6 ++++++
 2 files changed, 9 insertions(+)

diff --git a/Android.mk b/Android.mk
index 5035fab..7f20035 100644
--- a/Android.mk
+++ b/Android.mk
@@ -14,6 +14,9 @@ ifeq ($(TARGET_BOARD_PLATFORM),msm8084)
 keymaster-def += -D_ION_HEAP_MASK_COMPATIBILITY_WA
 endif
 endif
+ifeq ($(TARGET_KEYMASTER_WAIT_FOR_QSEE),true)
+keymaster-def += -DWAIT_FOR_QSEE
+endif
 
 include $(CLEAR_VARS)
 
diff --git a/keymaster_qcom.cpp b/keymaster_qcom.cpp
index b18bb04..62e51bf 100644
--- a/keymaster_qcom.cpp
+++ b/keymaster_qcom.cpp
@@ -743,7 +743,9 @@ static int qcom_km_open(const hw_module_t* module, const char* name,
 {
     int ret = 0;
     unsigned int attempt_num = 0;
+#ifdef WAIT_FOR_QSEE
     char property_val[PROPERTY_VALUE_MAX] = {0};
+#endif
     qcom_keymaster_handle_t* km_handle;
     if (strcmp(name, KEYSTORE_KEYMASTER) != 0)
         return -EINVAL;
@@ -768,12 +770,16 @@ static int qcom_km_open(const hw_module_t* module, const char* name,
     dev->context = (void *)km_handle;
     while (attempt_num < MAX_PROPERTY_GET_ATTEMPTS)
     {
+#ifdef WAIT_FOR_QSEE
         property_get("sys.keymaster.loaded", property_val, "");
         if (strncmp(property_val, "true", sizeof(property_val)) == 0)
         {
+#endif
             ALOGD("keymaster app is loaded");
             break;
+#ifdef WAIT_FOR_QSEE
         }
+#endif
         if (attempt_num == 0)
             ALOGE("keymaster app is not loaded, attempt number %d", attempt_num);
         attempt_num++;
-- 
2.19.1


From fb1cc0cf098e7422b024a07adf923693ed0af6c4 Mon Sep 17 00:00:00 2001
From: Keith Mok <kmok@cyngn.com>
Date: Fri, 4 Dec 2015 10:03:49 -0800
Subject: [PATCH 07/10] keymaster: add TARGET_PROVIDES_KEYMASTER

Qcom makes keymaster a propertiies blob in M.
To maintain compatibility with Cyanogenmod builds,
add a flag to optionally disable building keymaster here.

Change-Id: Ibb95cb54651ec5af266504e66f1078adaa53c0d8
---
 Android.mk | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/Android.mk b/Android.mk
index 7f20035..41c8c82 100644
--- a/Android.mk
+++ b/Android.mk
@@ -2,6 +2,7 @@
 ifneq ($(BOARD_IS_AUTOMOTIVE),true)
 LOCAL_PATH := $(call my-dir)
 
+ifneq ($(TARGET_PROVIDES_KEYMASTER),true)
 ifneq ($(filter msm8960 msm8226 msm8974 msm8610 msm8084 apq8084 msm8909 msm8916 msm8952 msm8992 msm8994,$(TARGET_BOARD_PLATFORM)),)
 
 keymaster-def := -fvisibility=hidden -Wall
@@ -45,4 +46,5 @@ LOCAL_MODULE_TAGS := optional
 include $(BUILD_SHARED_LIBRARY)
 
 endif # TARGET_BOARD_PLATFORM
+endif # TARGET_PROVIDES_KEYMASTER
 endif
-- 
2.19.1


From c073f6ad2ca3c342357672e90079e0da1da6f7e6 Mon Sep 17 00:00:00 2001
From: Michael Bestas <mkbestas@lineageos.org>
Date: Mon, 6 Nov 2017 00:26:20 +0200
Subject: [PATCH 08/10] keymaster: Fix compiler warnings

Change-Id: If7c787431e08d48ac14a1d2be4df61d56dae58f0
---
 keymaster_qcom.cpp | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/keymaster_qcom.cpp b/keymaster_qcom.cpp
index 62e51bf..3c0f7b5 100644
--- a/keymaster_qcom.cpp
+++ b/keymaster_qcom.cpp
@@ -202,7 +202,6 @@ static int32_t qcom_km_ION_memalloc(struct qcom_km_ion_info_t *handle,
 {
     int32_t ret = 0;
     int32_t iret = 0;
-    int32_t fd = 0;
     unsigned char *v_addr;
     struct ion_allocation_data ion_alloc_data;
     int32_t ion_fd;
@@ -485,7 +484,7 @@ static int qcom_km_sign_data(const keymaster0_device_t* dev,
         return -1;
     }
     if (dataLength > KM_KEY_SIZE_MAX) {
-        ALOGE("Input data to be signed is too long %d bytes", dataLength);
+        ALOGE("Input data to be signed is too long %zu bytes", dataLength);
         return -1;
     }
     if (data == NULL) {
-- 
2.19.1


From 7f0c0cc205788d503d9f0cde2fe0183d5200f8fc Mon Sep 17 00:00:00 2001
From: Artem Borisov <dedsa2002@gmail.com>
Date: Sat, 2 Dec 2017 20:39:02 +0300
Subject: [PATCH 09/10] keymaster: move to /vendor

Change-Id: I353a97638244fb4906d4da36147fa07147bf3065
---
 Android.mk | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/Android.mk b/Android.mk
index 41c8c82..ef431a8 100644
--- a/Android.mk
+++ b/Android.mk
@@ -42,6 +42,8 @@ LOCAL_SHARED_LIBRARIES := \
 LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
 
 LOCAL_MODULE_TAGS := optional
+LOCAL_VENDOR_MODULE := true
+LOCAL_MODULE_OWNER := qcom
 
 include $(BUILD_SHARED_LIBRARY)
 
-- 
2.19.1


From a610b3252fba7af4558c69dc1caabcc68a13a9c9 Mon Sep 17 00:00:00 2001
From: Bruno Martins <bgcngm@gmail.com>
Date: Sun, 4 Nov 2018 10:36:23 +0000
Subject: [PATCH 10/10] keymaster: Use generated kernel headers

Change-Id: I4382b9f0b8a3fb82acc2ce19b36c330c871ce573
---
 Android.mk | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Android.mk b/Android.mk
index ef431a8..46495db 100644
--- a/Android.mk
+++ b/Android.mk
@@ -39,7 +39,7 @@ LOCAL_SHARED_LIBRARIES := \
         libdl \
         libcutils
 
-LOCAL_ADDITIONAL_DEPENDENCIES := $(LOCAL_PATH)/Android.mk
+LOCAL_HEADER_LIBRARIES := generated_kernel_headers
 
 LOCAL_MODULE_TAGS := optional
 LOCAL_VENDOR_MODULE := true
-- 
2.19.1

